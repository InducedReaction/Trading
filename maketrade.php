<?php
include_once'connect.php';

function parseOptionSymbol($ticker) {
    // Extract parts of the ticker
    // Expecting format like AAPL_052424C200 or AAPL_052424P182.5
    list($underlying, $details) = explode('_', $ticker);
    $expiration = substr($details, 0, 6);  // MMDDYY
    $type = substr($details, 6, 1);        // C or P
    $strike = substr($details, 7);         // Strike as a decimal number

    // Reformat the expiration from MMDDYY to YYMMDD
    $expirationFormatted = substr($expiration, 4, 2) . substr($expiration, 0, 2) . substr($expiration, 2, 2);

    // Correctly handle and format the strike price
    // The strike price needs to be formatted as an 8-character wide number with 3 decimal places, with no dot
    // Convert the strike price from a decimal to an integer representation in cents
    $strikeInCents = (float)$strike * 1000; // Convert to integer cents
    $strikeFormatted = sprintf('%08d', $strikeInCents);

    // Combine to Schwab's required format: [Symbol][YYMMDD][C/P][Strike]
    // Ensure the symbol is 6 characters wide, padded if necessary
    $symbolFormatted = str_pad($underlying, 6, ' ', STR_PAD_RIGHT);

    return $symbolFormatted . $expirationFormatted . $type . $strikeFormatted;
}




function buytoopen($ordertype, $price, $quantity, $ticker, $code1) {
    $accountNumber = readaddress("accountnumber");
    $symbol = parseOptionSymbol($ticker);
	$url = 'https://api.schwabapi.com/trader/v1/accounts/' . $accountNumber . '/orders';
    $orderDetails = [
        "session" => "NORMAL",
        "duration" => "DAY",
        "orderType" => $ordertype,
        "price" => $price,
        "orderStrategyType" => "SINGLE",
        "orderLegCollection" => [
            [
                "instruction" => "BUY_TO_OPEN",
                "quantity" => $quantity,
                "instrument" => [
                    "symbol" => $symbol,
                    "assetType" => "OPTION"
                ]
            ]
        ]
    ];
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Authorization: Bearer ' . $code1,
        'Content-Type: application/json'
    ]);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($orderDetails));
    $result = curl_exec($ch);
    if (curl_errno($ch)) {
        echo 'Curl error: ' . curl_error($ch);
    }
    curl_close($ch);
}

/*
function buytoopen($ordertype,$price,$quantity,$symbol,$code1){//LIMIT, price, quantity, symbol, code
	
$accountnumber=readaddress("accountnumber");
// Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
$ch = curl_init();

curl_setopt($ch, CURLOPT_URL, 'https://api.tdameritrade.com/v1/accounts/'.$accountnumber.'/orders');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_POST, 1);
curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"complexOrderStrategyType\": \"NONE\",\n  \"orderType\": \"".$ordertype."\",\n  \"session\": \"NORMAL\",\n  \"price\": \"".$price."\",\n  \"duration\": \"DAY\",\n  \"orderStrategyType\": \"SINGLE\",\n  \"orderLegCollection\": [\n    {\n      \"instruction\": \"BUY_TO_OPEN\",\n      \"quantity\": ".$quantity.",\n      \"instrument\": {\n        \"symbol\": \"".$symbol."\",\n        \"assetType\": \"OPTION\"\n    \t}\n    }\n  ]\n}");

$headers = array();
$headers[] = 'Authorization: Bearer ' . $code1;
$headers[] = 'Content-Type: application/json';
curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

$result = curl_exec($ch);
if (curl_errno($ch)) {
    //echo 'Error:' . curl_error($ch);
}
curl_close($ch);

//echo $result;
}
*/
//buytoopen("LIMIT","0.05",1,"AAPL_052424C200",$code1);

function selltoclose($ordertype,$price,$quantity,$ticker,$code1){//LIMIT, price, quantity
    $accountNumber = readaddress("accountnumber");
    $symbol = parseOptionSymbol($ticker);
	$url = 'https://api.schwabapi.com/trader/v1/accounts/' . $accountNumber . '/orders';
    $orderDetails = [
        "session" => "NORMAL",
        "duration" => "DAY",
        "orderType" => $ordertype,
        "price" => $price,
        "orderStrategyType" => "SINGLE",
        "orderLegCollection" => [
            [
                "instruction" => "SELL_TO_CLOSE",
                "quantity" => $quantity,
                "instrument" => [
                    "symbol" => $symbol,
                    "assetType" => "OPTION"
                ]
            ]
        ]
    ];
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Authorization: Bearer ' . $code1,
        'Content-Type: application/json'
    ]);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($orderDetails));
    $result = curl_exec($ch);
    if (curl_errno($ch)) {
        echo 'Curl error: ' . curl_error($ch);
    }
    curl_close($ch);
	//$data = json_decode($result, true);
	//print_r($data);
}
//selltoclose("LIMIT","0.50",1,"SPCE_110521P19",$code1);

function selltoopen($ordertype,$price,$quantity,$ticker,$code1){//LIMIT, price, quantity, symbol, code
    $accountNumber = readaddress("accountnumber");
    $symbol = parseOptionSymbol($ticker);
	$url = 'https://api.schwabapi.com/trader/v1/accounts/' . $accountNumber . '/orders';
    $orderDetails = [
        "session" => "NORMAL",
        "duration" => "DAY",
        "orderType" => $ordertype,
        "price" => $price,
        "orderStrategyType" => "SINGLE",
        "orderLegCollection" => [
            [
                "instruction" => "SELL_TO_OPEN",
                "quantity" => $quantity,
                "instrument" => [
                    "symbol" => $symbol,
                    "assetType" => "OPTION"
                ]
            ]
        ]
    ];
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Authorization: Bearer ' . $code1,
        'Content-Type: application/json'
    ]);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($orderDetails));
    $result = curl_exec($ch);
    if (curl_errno($ch)) {
        echo 'Curl error: ' . curl_error($ch);
    }
    curl_close($ch);
}
//selltoopen("LIMIT","0.50",1,"SPCE_110521C21",$code1);

function buytoclose($ordertype,$price,$quantity,$ticker,$code1){//LIMIT, price, quantity
    $accountNumber = readaddress("accountnumber");
    $symbol = parseOptionSymbol($ticker);
	$url = 'https://api.schwabapi.com/trader/v1/accounts/' . $accountNumber . '/orders';
    $orderDetails = [
        "session" => "NORMAL",
        "duration" => "DAY",
        "orderType" => $ordertype,
        "price" => $price,
        "orderStrategyType" => "SINGLE",
        "orderLegCollection" => [
            [
                "instruction" => "BUY_TO_CLOSE",
                "quantity" => $quantity,
                "instrument" => [
                    "symbol" => $symbol,
                    "assetType" => "OPTION"
                ]
            ]
        ]
    ];
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Authorization: Bearer ' . $code1,
        'Content-Type: application/json'
    ]);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($orderDetails));
    $result = curl_exec($ch);
    if (curl_errno($ch)) {
        echo 'Curl error: ' . curl_error($ch);
    }
    curl_close($ch);
}
//buytoclose("LIMIT","0.50",1,"SPCE_110521P19",$code1);

function buy($ordertype,$price,$quantity,$symbol,$code1){//LIMIT, price, quantity, symbol, code
	
$accountNumber = readaddress("accountnumber");
    $symbol = $symbol;
	$url = 'https://api.schwabapi.com/trader/v1/accounts/' . $accountNumber . '/orders';
    $orderDetails = [
        "session" => "SEAMLESS",
        "duration" => "DAY",
        "orderType" => $ordertype,
        "price" => $price,
        "orderStrategyType" => "SINGLE",
        "orderLegCollection" => [
            [
                "instruction" => "BUY",
                "quantity" => $quantity,
                "instrument" => [
                    "symbol" => $symbol,
                    "assetType" => "EQUITY"
                ]
            ]
        ]
    ];
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Authorization: Bearer ' . $code1,
        'Content-Type: application/json'
    ]);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($orderDetails));
    $result = curl_exec($ch);
    if (curl_errno($ch)) {
        echo 'Curl error: ' . curl_error($ch);
    }
    curl_close($ch);
	
}
//buy("LIMIT","0.50",1,"SPCE",$code1);

function sell($ordertype,$price,$quantity,$symbol,$code1){//LIMIT, price, quantity
	
$accountNumber = readaddress("accountnumber");
    $symbol = $symbol;
	$url = 'https://api.schwabapi.com/trader/v1/accounts/' . $accountNumber . '/orders';
    $orderDetails = [
        "session" => "SEAMLESS",
        "duration" => "DAY",
        "orderType" => $ordertype,
        "price" => $price,
        "orderStrategyType" => "SINGLE",
        "orderLegCollection" => [
            [
                "instruction" => "SELL",
                "quantity" => $quantity,
                "instrument" => [
                    "symbol" => $symbol,
                    "assetType" => "EQUITY"
                ]
            ]
        ]
    ];
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Authorization: Bearer ' . $code1,
        'Content-Type: application/json'
    ]);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($orderDetails));
    $result = curl_exec($ch);
    if (curl_errno($ch)) {
        echo 'Curl error: ' . curl_error($ch);
    }
    curl_close($ch);
}
//sell("LIMIT","0.50",1,"SPCE",$code1);

function sellshort($ordertype,$price,$quantity,$symbol,$code1){//LIMIT, price, quantity
$accountNumber = readaddress("accountnumber");
    $symbol = $symbol;
	$url = 'https://api.schwabapi.com/trader/v1/accounts/' . $accountNumber . '/orders';
    $orderDetails = [
        "session" => "SEAMLESS",
        "duration" => "DAY",
        "orderType" => $ordertype,
        "price" => $price,
        "orderStrategyType" => "SINGLE",
        "orderLegCollection" => [
            [
                "instruction" => "SELL_SHORT",
                "quantity" => $quantity,
                "instrument" => [
                    "symbol" => $symbol,
                    "assetType" => "EQUITY"
                ]
            ]
        ]
    ];
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Authorization: Bearer ' . $code1,
        'Content-Type: application/json'
    ]);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($orderDetails));
    $result = curl_exec($ch);
    if (curl_errno($ch)) {
        echo 'Curl error: ' . curl_error($ch);
    }
    curl_close($ch);
}
//sellshort("LIMIT","0.50",1,"SPCE",$code1);

function buytocover($ordertype,$price,$quantity,$symbol,$code1){//LIMIT, price, quantity, symbol, code
$accountNumber = readaddress("accountnumber");
    $symbol = $symbol;
	$url = 'https://api.schwabapi.com/trader/v1/accounts/' . $accountNumber . '/orders';
    $orderDetails = [
        "session" => "SEAMLESS",
        "duration" => "DAY",
        "orderType" => $ordertype,
        "price" => $price,
        "orderStrategyType" => "SINGLE",
        "orderLegCollection" => [
            [
                "instruction" => "BUY_TO_COVER",
                "quantity" => $quantity,
                "instrument" => [
                    "symbol" => $symbol,
                    "assetType" => "EQUITY"
                ]
            ]
        ]
    ];
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Authorization: Bearer ' . $code1,
        'Content-Type: application/json'
    ]);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($orderDetails));
    $result = curl_exec($ch);
    if (curl_errno($ch)) {
        echo 'Curl error: ' . curl_error($ch);
    }
    curl_close($ch);
}
//buytocover("LIMIT","0.50",1,"SPCE",$code1);

//etrade untested.......

function etrade_buytoopen($ordertype, $price, $quantity, $symbol) {
	
	// Parse the symbol
    list($underlyingSymbol, $optionDetails) = explode('_', $symbol);
    $expiryMonth = substr($optionDetails, 0, 2);
    $expiryDay = intval(substr($optionDetails, 2, 2)); // Convert to integer to remove leading zero
    $expiryYear = "20" .intval(substr($optionDetails, 4, 2));   // Convert to integer to remove leading zero
    $callPut = substr($optionDetails, 6, 1) == 'C' ? 'CALL' : 'PUT';
    $strikePrice = substr($optionDetails, 7);
	
	$clientOrderId = time(); 
	$orderXml = <<<XML
	<?xml version="1.0" encoding="UTF-8"?>
	<PreviewOrderRequest>
		<Order>
			<Instrument>
				<Product>
					<callPut>{$callPut}</callPut>
					<expiryDay>{$expiryDay}</expiryDay>
					<expiryMonth>{$expiryMonth}</expiryMonth>
					<expiryYear>{$expiryYear}</expiryYear>
					<securityType>OPTN</securityType>
					<strikePrice>{$strikePrice}</strikePrice>
					<symbol>{$underlyingSymbol}</symbol>
				</Product>
				<orderAction>BUY_OPEN</orderAction>
				<orderedQuantity>{$quantity}</orderedQuantity>
				<quantity>{$quantity}</quantity>
			</Instrument>
			<allOrNone>false</allOrNone>
			<limitPrice>{$price}</limitPrice>
			<marketSession>REGULAR</marketSession>
			<orderTerm>GOOD_FOR_DAY</orderTerm>
			<priceType>{$ordertype}</priceType>
			<stopPrice>0</stopPrice>
		</Order>
		<clientOrderId>{$clientOrderId}</clientOrderId>
		<orderType>OPTN</orderType>
	</PreviewOrderRequest>
	XML;


	$previewResponse = etrade_preview_order($orderXml);

	 //echo "<pre>";
		//print_r($previewResponse);
		//echo "</pre>";
		
	$previewOrderResponse = $previewResponse['PreviewOrderResponse']; // Replace $yourResponseArray with the actual variable holding the response
	$previewIdsArray = $previewOrderResponse['PreviewIds'];
	$previewId = $previewIdsArray[0]['previewId'];


	$placeorderXml = <<<XML
	<?xml version="1.0" encoding="UTF-8"?>
	<PlaceOrderRequest>
		<Order>
			<Instrument>
				<Product>
					<callPut>{$callPut}</callPut>
					<expiryDay>{$expiryDay}</expiryDay>
					<expiryMonth>{$expiryMonth}</expiryMonth>
					<expiryYear>{$expiryYear}</expiryYear>
					<securityType>OPTN</securityType>
					<strikePrice>{$strikePrice}</strikePrice>
					<symbol>$underlyingSymbol</symbol>
				</Product>
				<orderAction>BUY_OPEN</orderAction>
				<orderedQuantity>{$quantity}</orderedQuantity>
				<quantity>{$quantity}</quantity>
			</Instrument>
			<allOrNone>false</allOrNone>
			<limitPrice>{$price}</limitPrice>
			<marketSession>REGULAR</marketSession>
			<orderTerm>GOOD_FOR_DAY</orderTerm>
			<priceType>LIMIT</priceType>
			<stopPrice>0</stopPrice>
		</Order>
		<PreviewIds>
			<previewId>{$previewId}</previewId>
		</PreviewIds>
		<clientOrderId>{$clientOrderId}</clientOrderId>
		<orderType>OPTN</orderType>
	</PlaceOrderRequest>
	XML;	
		$orderResponse = etrade_place_order($placeorderXml);
}


function etrade_selltoclose($ordertype, $price, $quantity, $symbol) {
	
	// Parse the symbol
    list($underlyingSymbol, $optionDetails) = explode('_', $symbol);
    $expiryMonth = substr($optionDetails, 0, 2);
    $expiryDay = intval(substr($optionDetails, 2, 2)); // Convert to integer to remove leading zero
    $expiryYear = "20" .intval(substr($optionDetails, 4, 2));   // Convert to integer to remove leading zero
    $callPut = substr($optionDetails, 6, 1) == 'C' ? 'CALL' : 'PUT';
    $strikePrice = substr($optionDetails, 7);
	
	$clientOrderId = time(); 
	$orderXml = <<<XML
	<?xml version="1.0" encoding="UTF-8"?>
	<PreviewOrderRequest>
		<Order>
			<Instrument>
				<Product>
					<callPut>{$callPut}</callPut>
					<expiryDay>{$expiryDay}</expiryDay>
					<expiryMonth>{$expiryMonth}</expiryMonth>
					<expiryYear>{$expiryYear}</expiryYear>
					<securityType>OPTN</securityType>
					<strikePrice>{$strikePrice}</strikePrice>
					<symbol>{$underlyingSymbol}</symbol>
				</Product>
				<orderAction>SELL_CLOSE</orderAction>
				<orderedQuantity>{$quantity}</orderedQuantity>
				<quantity>{$quantity}</quantity>
			</Instrument>
			<allOrNone>false</allOrNone>
			<limitPrice>{$price}</limitPrice>
			<marketSession>REGULAR</marketSession>
			<orderTerm>GOOD_FOR_DAY</orderTerm>
			<priceType>{$ordertype}</priceType>
			<stopPrice>0</stopPrice>
		</Order>
		<clientOrderId>{$clientOrderId}</clientOrderId>
		<orderType>OPTN</orderType>
	</PreviewOrderRequest>
	XML;


	$previewResponse = etrade_preview_order($orderXml);

	 //echo "<pre>";
		//print_r($previewResponse);
		//echo "</pre>";
		
	$previewOrderResponse = $previewResponse['PreviewOrderResponse']; // Replace $yourResponseArray with the actual variable holding the response
	$previewIdsArray = $previewOrderResponse['PreviewIds'];
	$previewId = $previewIdsArray[0]['previewId'];


	$placeorderXml = <<<XML
	<?xml version="1.0" encoding="UTF-8"?>
	<PlaceOrderRequest>
		<Order>
			<Instrument>
				<Product>
					<callPut>{$callPut}</callPut>
					<expiryDay>{$expiryDay}</expiryDay>
					<expiryMonth>{$expiryMonth}</expiryMonth>
					<expiryYear>{$expiryYear}</expiryYear>
					<securityType>OPTN</securityType>
					<strikePrice>{$strikePrice}</strikePrice>
					<symbol>$underlyingSymbol</symbol>
				</Product>
				<orderAction>SELL_CLOSE</orderAction>
				<orderedQuantity>{$quantity}</orderedQuantity>
				<quantity>{$quantity}</quantity>
			</Instrument>
			<allOrNone>false</allOrNone>
			<limitPrice>{$price}</limitPrice>
			<marketSession>REGULAR</marketSession>
			<orderTerm>GOOD_FOR_DAY</orderTerm>
			<priceType>LIMIT</priceType>
			<stopPrice>0</stopPrice>
		</Order>
		<PreviewIds>
			<previewId>{$previewId}</previewId>
		</PreviewIds>
		<clientOrderId>{$clientOrderId}</clientOrderId>
		<orderType>OPTN</orderType>
	</PlaceOrderRequest>
	XML;	
		$orderResponse = etrade_place_order($placeorderXml);
}


function etrade_selltoopen($ordertype, $price, $quantity, $symbol) {
	
	// Parse the symbol
    list($underlyingSymbol, $optionDetails) = explode('_', $symbol);
    $expiryMonth = substr($optionDetails, 0, 2);
    $expiryDay = intval(substr($optionDetails, 2, 2)); // Convert to integer to remove leading zero
    $expiryYear = "20" .intval(substr($optionDetails, 4, 2));   // Convert to integer to remove leading zero
    $callPut = substr($optionDetails, 6, 1) == 'C' ? 'CALL' : 'PUT';
    $strikePrice = substr($optionDetails, 7);
	
	$clientOrderId = time(); 
	$orderXml = <<<XML
	<?xml version="1.0" encoding="UTF-8"?>
	<PreviewOrderRequest>
		<Order>
			<Instrument>
				<Product>
					<callPut>{$callPut}</callPut>
					<expiryDay>{$expiryDay}</expiryDay>
					<expiryMonth>{$expiryMonth}</expiryMonth>
					<expiryYear>{$expiryYear}</expiryYear>
					<securityType>OPTN</securityType>
					<strikePrice>{$strikePrice}</strikePrice>
					<symbol>{$underlyingSymbol}</symbol>
				</Product>
				<orderAction>SELL_OPEN</orderAction>
				<orderedQuantity>{$quantity}</orderedQuantity>
				<quantity>{$quantity}</quantity>
			</Instrument>
			<allOrNone>false</allOrNone>
			<limitPrice>{$price}</limitPrice>
			<marketSession>REGULAR</marketSession>
			<orderTerm>GOOD_FOR_DAY</orderTerm>
			<priceType>{$ordertype}</priceType>
			<stopPrice>0</stopPrice>
		</Order>
		<clientOrderId>{$clientOrderId}</clientOrderId>
		<orderType>OPTN</orderType>
	</PreviewOrderRequest>
	XML;


	$previewResponse = etrade_preview_order($orderXml);

	 //echo "<pre>";
		//print_r($previewResponse);
		//echo "</pre>";
		
	$previewOrderResponse = $previewResponse['PreviewOrderResponse']; // Replace $yourResponseArray with the actual variable holding the response
	$previewIdsArray = $previewOrderResponse['PreviewIds'];
	$previewId = $previewIdsArray[0]['previewId'];


	$placeorderXml = <<<XML
	<?xml version="1.0" encoding="UTF-8"?>
	<PlaceOrderRequest>
		<Order>
			<Instrument>
				<Product>
					<callPut>{$callPut}</callPut>
					<expiryDay>{$expiryDay}</expiryDay>
					<expiryMonth>{$expiryMonth}</expiryMonth>
					<expiryYear>{$expiryYear}</expiryYear>
					<securityType>OPTN</securityType>
					<strikePrice>{$strikePrice}</strikePrice>
					<symbol>$underlyingSymbol</symbol>
				</Product>
				<orderAction>SELL_OPEN</orderAction>
				<orderedQuantity>{$quantity}</orderedQuantity>
				<quantity>{$quantity}</quantity>
			</Instrument>
			<allOrNone>false</allOrNone>
			<limitPrice>{$price}</limitPrice>
			<marketSession>REGULAR</marketSession>
			<orderTerm>GOOD_FOR_DAY</orderTerm>
			<priceType>LIMIT</priceType>
			<stopPrice>0</stopPrice>
		</Order>
		<PreviewIds>
			<previewId>{$previewId}</previewId>
		</PreviewIds>
		<clientOrderId>{$clientOrderId}</clientOrderId>
		<orderType>OPTN</orderType>
	</PlaceOrderRequest>
	XML;	
		$orderResponse = etrade_place_order($placeorderXml);
}



function etrade_buytoclose($ordertype, $price, $quantity, $symbol) {
	
	// Parse the symbol
    list($underlyingSymbol, $optionDetails) = explode('_', $symbol);
    $expiryMonth = substr($optionDetails, 0, 2);
    $expiryDay = intval(substr($optionDetails, 2, 2)); // Convert to integer to remove leading zero
    $expiryYear = "20" .intval(substr($optionDetails, 4, 2));   // Convert to integer to remove leading zero
    $callPut = substr($optionDetails, 6, 1) == 'C' ? 'CALL' : 'PUT';
    $strikePrice = substr($optionDetails, 7);
	
	$clientOrderId = time(); 
	$orderXml = <<<XML
	<?xml version="1.0" encoding="UTF-8"?>
	<PreviewOrderRequest>
		<Order>
			<Instrument>
				<Product>
					<callPut>{$callPut}</callPut>
					<expiryDay>{$expiryDay}</expiryDay>
					<expiryMonth>{$expiryMonth}</expiryMonth>
					<expiryYear>{$expiryYear}</expiryYear>
					<securityType>OPTN</securityType>
					<strikePrice>{$strikePrice}</strikePrice>
					<symbol>{$underlyingSymbol}</symbol>
				</Product>
				<orderAction>BUY_CLOSE</orderAction>
				<orderedQuantity>{$quantity}</orderedQuantity>
				<quantity>{$quantity}</quantity>
			</Instrument>
			<allOrNone>false</allOrNone>
			<limitPrice>{$price}</limitPrice>
			<marketSession>REGULAR</marketSession>
			<orderTerm>GOOD_FOR_DAY</orderTerm>
			<priceType>{$ordertype}</priceType>
			<stopPrice>0</stopPrice>
		</Order>
		<clientOrderId>{$clientOrderId}</clientOrderId>
		<orderType>OPTN</orderType>
	</PreviewOrderRequest>
	XML;


	$previewResponse = etrade_preview_order($orderXml);

	 //echo "<pre>";
		//print_r($previewResponse);
		//echo "</pre>";
		
	$previewOrderResponse = $previewResponse['PreviewOrderResponse']; // Replace $yourResponseArray with the actual variable holding the response
	$previewIdsArray = $previewOrderResponse['PreviewIds'];
	$previewId = $previewIdsArray[0]['previewId'];


	$placeorderXml = <<<XML
	<?xml version="1.0" encoding="UTF-8"?>
	<PlaceOrderRequest>
		<Order>
			<Instrument>
				<Product>
					<callPut>{$callPut}</callPut>
					<expiryDay>{$expiryDay}</expiryDay>
					<expiryMonth>{$expiryMonth}</expiryMonth>
					<expiryYear>{$expiryYear}</expiryYear>
					<securityType>OPTN</securityType>
					<strikePrice>{$strikePrice}</strikePrice>
					<symbol>$underlyingSymbol</symbol>
				</Product>
				<orderAction>BUY_CLOSE</orderAction>
				<orderedQuantity>{$quantity}</orderedQuantity>
				<quantity>{$quantity}</quantity>
			</Instrument>
			<allOrNone>false</allOrNone>
			<limitPrice>{$price}</limitPrice>
			<marketSession>REGULAR</marketSession>
			<orderTerm>GOOD_FOR_DAY</orderTerm>
			<priceType>LIMIT</priceType>
			<stopPrice>0</stopPrice>
		</Order>
		<PreviewIds>
			<previewId>{$previewId}</previewId>
		</PreviewIds>
		<clientOrderId>{$clientOrderId}</clientOrderId>
		<orderType>OPTN</orderType>
	</PlaceOrderRequest>
	XML;	
		$orderResponse = etrade_place_order($placeorderXml);
}









function etrade_buy($ordertype, $price, $quantity, $symbol) {
    $clientOrderId = time();
    
    // Construct the XML for the stock purchase
    $orderXml = <<<XML
    <?xml version="1.0" encoding="UTF-8"?>
    <PreviewOrderRequest>
        <Order>
            <Instrument>
                <Product>
                    <securityType>EQ</securityType>
                    <symbol>{$symbol}</symbol>
                </Product>
                <orderAction>BUY</orderAction>
                <orderedQuantity>{$quantity}</orderedQuantity>
                <quantity>{$quantity}</quantity>
            </Instrument>
            <allOrNone>false</allOrNone>
            <limitPrice>{$price}</limitPrice>
            <marketSession>REGULAR</marketSession>
            <orderTerm>GOOD_FOR_DAY</orderTerm>
            <priceType>{$ordertype}</priceType>
            <stopPrice>0</stopPrice> <!-- Adjust if needed -->
        </Order>
        <clientOrderId>{$clientOrderId}</clientOrderId>
        <orderType>EQ</orderType>
    </PreviewOrderRequest>
    XML;

    // Send the preview order
    $previewResponse = etrade_preview_order($orderXml);

    // Check if the preview was successful
    if (isset($previewResponse['PreviewOrderResponse']['PreviewIds'][0]['previewId'])) {
        $previewId = $previewResponse['PreviewOrderResponse']['PreviewIds'][0]['previewId'];

        // Modify the XML to place the actual order
        $placeOrderXml = str_replace("<PreviewOrderRequest>", "<PlaceOrderRequest>", $orderXml);
        $placeOrderXml = str_replace("</PreviewOrderRequest>", "</PlaceOrderRequest>", $placeOrderXml);
        $placeOrderXml = str_replace("<clientOrderId>{$clientOrderId}</clientOrderId>", "<PreviewIds><previewId>{$previewId}</previewId></PreviewIds><clientOrderId>{$clientOrderId}</clientOrderId>", $placeOrderXml);

        // Place the order
        $orderResponse = etrade_place_order($placeOrderXml);
        return $orderResponse;
    } else {
        return array('error' => 'Failed to get preview ID', 'response' => $previewResponse);
    }
}

function etrade_sell($ordertype, $price, $quantity, $symbol) {
    $clientOrderId = time();
    
    // Construct the XML for the stock sale
    $orderXml = <<<XML
    <?xml version="1.0" encoding="UTF-8"?>
    <PreviewOrderRequest>
        <Order>
            <Instrument>
                <Product>
                    <securityType>EQ</securityType>
                    <symbol>{$symbol}</symbol>
                </Product>
                <orderAction>SELL</orderAction>
                <orderedQuantity>{$quantity}</orderedQuantity>
                <quantity>{$quantity}</quantity>
            </Instrument>
            <allOrNone>false</allOrNone>
            <limitPrice>{$price}</limitPrice>
            <marketSession>REGULAR</marketSession>
            <orderTerm>GOOD_FOR_DAY</orderTerm>
            <priceType>{$ordertype}</priceType>
            <stopPrice>0</stopPrice> <!-- Adjust if needed -->
        </Order>
        <clientOrderId>{$clientOrderId}</clientOrderId>
        <orderType>EQ</orderType>
    </PreviewOrderRequest>
    XML;

    // Send the preview order
    $previewResponse = etrade_preview_order($orderXml);

    // Check if the preview was successful
    if (isset($previewResponse['PreviewOrderResponse']['PreviewIds'][0]['previewId'])) {
        $previewId = $previewResponse['PreviewOrderResponse']['PreviewIds'][0]['previewId'];

        // Modify the XML to place the actual order
        $placeOrderXml = str_replace("<PreviewOrderRequest>", "<PlaceOrderRequest>", $orderXml);
        $placeOrderXml = str_replace("</PreviewOrderRequest>", "</PlaceOrderRequest>", $placeOrderXml);
        $placeOrderXml = str_replace("<clientOrderId>{$clientOrderId}</clientOrderId>", "<PreviewIds><previewId>{$previewId}</previewId></PreviewIds><clientOrderId>{$clientOrderId}</clientOrderId>", $placeOrderXml);

        // Place the order
        $orderResponse = etrade_place_order($placeOrderXml);
        return $orderResponse;
    } else {
        return array('error' => 'Failed to get preview ID', 'response' => $previewResponse);
    }
}

function etrade_sellshort($ordertype, $price, $quantity, $symbol) {
    $clientOrderId = time();
    
    // Construct the XML for short selling
    $orderXml = <<<XML
    <?xml version="1.0" encoding="UTF-8"?>
    <PreviewOrderRequest>
        <Order>
            <Instrument>
                <Product>
                    <securityType>EQ</securityType>
                    <symbol>{$symbol}</symbol>
                </Product>
                <orderAction>SELL_SHORT</orderAction>
                <orderedQuantity>{$quantity}</orderedQuantity>
                <quantity>{$quantity}</quantity>
            </Instrument>
            <allOrNone>false</allOrNone>
            <limitPrice>{$price}</limitPrice>
            <marketSession>REGULAR</marketSession>
            <orderTerm>GOOD_FOR_DAY</orderTerm>
            <priceType>{$ordertype}</priceType>
            <stopPrice>0</stopPrice> <!-- Adjust if needed -->
        </Order>
        <clientOrderId>{$clientOrderId}</clientOrderId>
        <orderType>EQ</orderType>
    </PreviewOrderRequest>
    XML;

    // Send the preview order
    $previewResponse = etrade_preview_order($orderXml);

    // Check if the preview was successful
    if (isset($previewResponse['PreviewOrderResponse']['PreviewIds'][0]['previewId'])) {
        $previewId = $previewResponse['PreviewOrderResponse']['PreviewIds'][0]['previewId'];

        // Modify the XML to place the actual order
        $placeOrderXml = str_replace("<PreviewOrderRequest>", "<PlaceOrderRequest>", $orderXml);
        $placeOrderXml = str_replace("</PreviewOrderRequest>", "</PlaceOrderRequest>", $placeOrderXml);
        $placeOrderXml = str_replace("<clientOrderId>{$clientOrderId}</clientOrderId>", "<PreviewIds><previewId>{$previewId}</previewId></PreviewIds><clientOrderId>{$clientOrderId}</clientOrderId>", $placeOrderXml);

        // Place the order
        $orderResponse = etrade_place_order($placeOrderXml);
        return $orderResponse;
    } else {
        return array('error' => 'Failed to get preview ID', 'response' => $previewResponse);
    }
}


function etrade_buytocover($ordertype, $price, $quantity, $symbol) {
    $clientOrderId = time();
    
    // Construct the XML for buying to cover
    $orderXml = <<<XML
    <?xml version="1.0" encoding="UTF-8"?>
    <PreviewOrderRequest>
        <Order>
            <Instrument>
                <Product>
                    <securityType>EQ</securityType>
                    <symbol>{$symbol}</symbol>
                </Product>
                <orderAction>BUY_TO_COVER</orderAction>
                <orderedQuantity>{$quantity}</orderedQuantity>
                <quantity>{$quantity}</quantity>
            </Instrument>
            <allOrNone>false</allOrNone>
            <limitPrice>{$price}</limitPrice>
            <marketSession>REGULAR</marketSession>
            <orderTerm>GOOD_FOR_DAY</orderTerm>
            <priceType>{$ordertype}</priceType>
            <stopPrice>0</stopPrice> <!-- Adjust if needed -->
        </Order>
        <clientOrderId>{$clientOrderId}</clientOrderId>
        <orderType>EQ</orderType>
    </PreviewOrderRequest>
    XML;

    // Send the preview order
    $previewResponse = etrade_preview_order($orderXml);

    // Check if the preview was successful
    if (isset($previewResponse['PreviewOrderResponse']['PreviewIds'][0]['previewId'])) {
        $previewId = $previewResponse['PreviewOrderResponse']['PreviewIds'][0]['previewId'];

        // Modify the XML to place the actual order
        $placeOrderXml = str_replace("<PreviewOrderRequest>", "<PlaceOrderRequest>", $orderXml);
        $placeOrderXml = str_replace("</PreviewOrderRequest>", "</PlaceOrderRequest>", $placeOrderXml);
        $placeOrderXml = str_replace("<clientOrderId>{$clientOrderId}</clientOrderId>", "<PreviewIds><previewId>{$previewId}</previewId></PreviewIds><clientOrderId>{$clientOrderId}</clientOrderId>", $placeOrderXml);

        // Place the order
        $orderResponse = etrade_place_order($placeOrderXml);
        return $orderResponse;
    } else {
        return array('error' => 'Failed to get preview ID', 'response' => $previewResponse);
    }
}





?>
